* Java Tooling Cookbook ( gradle / maven / etc )

** <2018-09-01 Sat>
*** Gradle jOOQ Generator Task 


#+BEGIN_SRC gradle
  apply plugin: 'java'

  repositories {
      mavenLocal()
      mavenCentral()
  }

  dependencies {
      compile 'org.jooq:jooq:3.11.4'

      runtime 'com.h2database:h2:1.4.177'
      testCompile 'junit:junit:4.11'
  }

  buildscript {
      repositories {
          mavenLocal()
          mavenCentral()
      }

      dependencies {
          classpath 'org.jooq:jooq-codegen:3.11.4'
          classpath 'com.h2database:h2:1.4.177'
      }
  }

  task jOOQModelGen() {
  def writer = new StringWriter()
  new groovy.xml.MarkupBuilder(writer)
  .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.11.0.xsd') {
      jdbc() {
          driver('org.h2.Driver')
          url('jdbc:h2:~/test-gradle')
          user('sa')
          password('')
      }
      generator() {
          database() {
          }

          // Watch out for this caveat when using MarkupBuilder with "reserved names"
          // - https://github.com/jOOQ/jOOQ/issues/4797
          // - http://stackoverflow.com/a/11389034/521799
          // - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
          generate([:]) {
              pojos true
              daos true
          }
          target() {
              packageName('org.jooq.example.gradle.db')
              directory('src/main/java')
          }
      }
  }

  // Run the code generator
  // ----------------------
  org.jooq.codegen.GenerationTool.generate(writer.toString())
  }

#+END_SRC


** <2018-08-24 Fri> 

*** Gradle Execute Shell

#+BEGIN_SRC gradle
  task localeExport(type:Exec) {
       commandLine 'ls', '-al' // command line arguments
       standardOutput = new ByteArrayOutputStream()
  }

#+END_SRC

*** local file dependency 

#+BEGIN_SRC gradle 

  compile 'org.springframework.boot:spring-boot-starter-jooq' {
      exclude group:'org.jooq', module:'jooq'
  }

  compile files('lib/xxx.jar')
#+END_SRC


** Maven / Gradle의 dependency scope에 관하여 .. 


빌드와 실행과정에는 아래와 같은 생명주기가 있다. 

*** 1. compile 

일반적인 의존 라이브러리들이 대부분 여기에 속한다.  
컴파일시 (javac) classpath에 걸린다.   
실행관련 플러그인으로 실행시 classpath에 걸린다 `java -cp your_deps.jar....`  
war, 혹은 fat jar 패키징시 같이 묶인다.   


*** 2. runtime 

실행시에만 classpath 에 걸린다.   
war, fat jar 패키징시 같이 묶인다.   

*** 3. provided 

  대표적인 예로 embedded tomcat이 여기에 속한다.  
  war 파일 패키징후 배포해서 사용할때는 해당라이브러리가 포함되어 있지 않아도 되므로   
  컴파일시 classpath에 걸린다.   
  실행 / 패키징시에는 같이 묶이지 않는다. 

  | | 컴파일 | 실행 | 패키징 | 
  |---|---|---|---|
  | compile | O | O | O |
  | runtime | x | O | O |
  | provided | O | x | x |
